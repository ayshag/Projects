"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var path = require("path");
function getMetaData(raw) {
    var defaultMeta = {
        idField: 'id',
    };
    if (raw.$meta) {
        return __assign({}, defaultMeta, raw.$meta);
    }
    return defaultMeta;
}
exports.getMetaData = getMetaData;
function convertData(raw) {
    var model = _.reduce(raw, function (pre, val, key) {
        if (val.$data) {
            pre[key] = {
                $meta: getMetaData(val),
                $data: val.$data,
            };
        }
        else {
            if (_.isArray(val)) {
                pre[key] = {
                    $meta: getMetaData(val),
                    $data: _.map(val, function (v) { return convertData(v); }),
                };
            }
            else if (_.isObject(val)) {
                pre[key] = {
                    $meta: getMetaData(val),
                    $data: convertData(val),
                };
            }
            else {
                pre[key] = val;
            }
        }
        return pre;
    }, {});
    return model;
}
exports.convertData = convertData;
function getRawData(filePath) {
    var absolutePath = path.resolve(process.cwd(), filePath);
    try {
        var dataResolver = require(absolutePath);
        var raw = _.isFunction(dataResolver) ? dataResolver.call(this) : dataResolver;
        return raw;
    }
    catch (ex) {
        throw new Error("Failed to load data in " + absolutePath);
    }
}
exports.getRawData = getRawData;
function getDataModel(raw) {
    try {
        var serverData = {
            root: {
                $meta: getMetaData(raw.$meta || {}),
                $data: convertData(raw),
            },
        };
        return serverData;
    }
    catch (ex) {
        throw new Error("Failed to parse data: " + ex);
    }
}
exports.getDataModel = getDataModel;
//# sourceMappingURL=data.parser.js.map